// Variables used by Scriptable.
// These must be at the very top of the file. Do not edit.
// icon-color: yellow; icon-glyph: magic;
// Widget Params
// Don't edit this, those are default values for debugging (location for Cupertino).
// You need to give your locations parameters through the widget params, more info below.
//const widgetParams = JSON.parse((args.widgetParameter != null) ? args.widgetParameter : '{ "LAT" : "37.32" , "LON" : "-122.03" , "LOC_NAME" : "Cupertino, US" }')

// WEATHER API PARAMETERS !important
// API KEY, you need an Open Weather API Key
// You can get one for free at: https://home.openweathermap.org/api_keys (account needed).
const API_KEY = "7f9971d8a309102caa0eb85cee4c29bc"

// Latitude and Longitude of the location where you get the weather of.
// You can get those from the Open Weather website while searching for a city, etc.
// This values are getted from the widget parameters, the widget parameters is a JSON string that looks like this:
// { "LAT" : "<latitude>" , "LON" : "<longitude>" , "LOC_NAME" : "<name to display>" }
// This to allow multiple instances of the widget with different locations, if you will only use one instance (1 widget), you can "hardcode" the values here.
// Note: To debug the widget you need to place the values here, because when playing the script in-app the widget parameters are null (= crash).
/*
let latLong = {}
try {
  latLong = await Location.current();
} catch {}

const LAT = latLong.latitude || widgetParams.LAT
const LON = latLong.longitude || widgetParams.LON
*/
const LAT = 45.3741521
const LON = 10.8242526


// Looking settings
// This are settings to customize the looking of the widgets, because this was made an iPhone SE (2016) screen, I can't test for bigger screens.
// So feel free to modify this to your taste.

// units : string > Defines the unit used to measure the temps, for temperatures in Fahrenheit use "imperial", "metric" for Celcius and "standard" for Kelvin (Default: "metric").
const units = "metric"
// twelveHours : true|false > Defines if the hours are displayed in a 12h format, use false for 24h format. (Default: true)
const twelveHours = false
// roundedGraph : true|false > true (Use rounded values to draw the graph) | false (Draws the graph using decimal values, this can be used to draw an smoother line).
const roundedGraph = true
// roundedTemp : true|false > true (Displays the temps rounding the values (29.8 = 30 | 29.3 = 29).
const roundedTemp = true

// Widget Size !important.
// Since the widget works "making" an image and displaying it as the widget background, you need to specify the exact size of the widget to
// get an 1:1 display ratio, if you specify an smaller size than the widget itself it will be displayed blurry.
// You can get the size simply taking an screenshot of your widgets on the home screen and measuring them in an image-proccessing software.
// contextSize : number > Height of the widget in screen pixels, this depends on you screen size (for an 4 inch display the small widget is 282 * 282 pixels on the home screen)
const contextSize = 465
// mediumWidgetWidth : number > Width of the medium widget in pixels, this depends on you screen size (for an 4 inch display the medium widget is 584 pixels long on the home screen)
const mediumWidgetWidth = 987

// accentColor : Color > Accent color of some elements (Graph lines and the location label).
const accentColor = new Color("#EB6E4E", 1)
// backgroundColor : Color > Background color of the widgets.
//const backgroundColor = new Color("#1C1C1E", 1)
const backgroundColor = Color.black();

//From here proceed with caution.
let fm = FileManager.iCloud();
let cachePath = fm.joinPath(fm.documentsDirectory(), "weatherCache");
if(!fm.fileExists(cachePath)){
  fm.createDirectory(cachePath)
}

let weatherData;
let locationData;
let usingCachedData = false;
let drawContext = new DrawContext();

drawContext.size = new Size((config.widgetFamily == "small") ? contextSize : mediumWidgetWidth, contextSize)
drawContext.opaque = false
drawContext.setTextAlignedCenter()

try {
  if(fm.fileExists(cachePath + "/location")){
    fm.remove(cachePath + "/location")
    fm.createDirectory(cachePath + "/location")
  }
  else{
    fm.createDirectory(cachePath + "/location")
  }
  weatherData = await new Request("https://api.openweathermap.org/data/2.5/onecall?lat=" + LAT + "&lon=" + LON + "&exclude=daily,minutely,alerts&units=" + units + "&lang=en&appid=" + API_KEY).loadJSON();
  fm.writeString(fm.joinPath(cachePath + "/location", "lastread"+"_"+LAT+"_"+LON), JSON.stringify(weatherData));
  locationData = await new Request("https://geocode.xyz/" + LAT + "," + LON + "?geoit=json").loadJSON();
  fm.writeString(fm.joinPath(cachePath + "/location", "lastLoc"+"_"+LAT+"_"+LON), JSON.stringify(locationData));
}catch(e){
  console.log("Offline mode")
  try{
    await fm.downloadFileFromiCloud(fm.joinPath(cachePath + "/location", "lastread"+"_"+LAT+"_"+LON));
    let raw = fm.readString(fm.joinPath(cachePath + "/location", "lastread"+"_"+LAT+"_"+LON));
    weatherData = JSON.parse(raw);
    await fm.downloadFileFromiCloud(fm.joinPath(cachePath + "/location", "lastLoc"+"_"+LAT+"_"+LON));
    let rawLoc = fm.readString(fm.joinPath(cachePath + "/location", "lastLoc"+"_"+LAT+"_"+LON));
    locationData = JSON.parse(rawLoc);
    usingCachedData = true;
  }catch(e2){
    console.log("Error: No offline data cached")
  }
}

// function to add suffix to day's number
function ordinalSuffix(input) {
	if (input % 10 == 1 && date != 11) {
		return input.toString() + "st";
	} else if (input % 10 == 2 && date != 12) {
		return input.toString() + "nd";
	} else if (input % 10 == 3 && date != 13) {
		return input.toString() + "rd";
	} else {
		return input.toString() + "th";
	}
}

// declare variables
let widget = new ListWidget();
var today = new Date();

widget.setPadding(-50, -50, 0, 0)
widget.backgroundColor = backgroundColor;

//add day to widget
var days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];
drawContext.setFont(Font.regularSystemFont(63))
drawContext.setTextColor(Color.white())
drawContext.drawText(days[today.getDay()].toString(), new Point(25,25));


//add month and number of the day to widget
var months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
drawContext.setFont(Font.regularSystemFont(63))
drawContext.setTextColor(Color.white())
drawContext.drawText(months[today.getMonth()].toString() + " " + ordinalSuffix(today.getDate()), new Point(25, 83));

//add name of city
drawContext.setFont(Font.regularSystemFont(30))
drawContext.setTextColor(Color.white())
drawContext.drawText(locationData.city.toString(), new Point(25, 155))

//add image of weather condition
let image = await loadImage(weatherData.current.weather[0].icon)
drawContext.drawImageAtPoint(image, new Point(100, 240))

//add degrees
drawContext.setFont(Font.regularSystemFont(63))
drawContext.setTextColor(Color.white())
drawContext.drawText(Math.round(weatherData.current.temp) + "°", new Point(225, 230))

//add degrees feels like
drawContext.setFont(Font.regularSystemFont(30))
drawContext.setTextColor(Color.gray())
drawContext.drawText("feels like " + Math.round(weatherData.current.feels_like) + "°", new Point(25, 380))

async function loadImage(imgName){
  if(fm.fileExists(fm.joinPath(cachePath, imgName))){
    await fm.downloadFileFromiCloud(fm.joinPath(cachePath, imgName))
    return Image.fromData(Data.fromFile(fm.joinPath(cachePath, imgName)))
  }else{
    let imgdata = await new Request("https://openweathermap.org/img/wn/"+imgName+".png").load();
    let img = Image.fromData(imgdata);
    fm.write(fm.joinPath(cachePath, imgName), imgdata);
	return img;
  }
}

function shouldRound(should, value){
  return ((should) ? Math.round(value) : value)
}

widget.backgroundImage = (drawContext.getImage());
widget.presentMedium()
Script.setWidget(widget);
